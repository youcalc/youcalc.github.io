{"version":3,"sources":["player/player-ai.ts"],"names":[],"mappings":"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","file":"player-ai.js","sourcesContent":["import { Player } from './player'\r\nimport { Board, BoardPiece } from '../board'\r\nimport { Utils } from '../utils'\r\n\r\nexport class PlayerAi extends Player {\r\n  static readonly MAX_DEPTH = 4\r\n  private ownBoardPieceValue: number\r\n  private enemyBoardPiece: BoardPiece\r\n  constructor(boardPiece: BoardPiece, canvas: HTMLCanvasElement) {\r\n    super(boardPiece, canvas)\r\n    this.ownBoardPieceValue = this.getBoardPieceValue(boardPiece)\r\n    this.enemyBoardPiece =\r\n      boardPiece === BoardPiece.PLAYER_1\r\n        ? BoardPiece.PLAYER_2\r\n        : BoardPiece.PLAYER_1\r\n  }\r\n  private getBoardPieceValue(boardPiece: BoardPiece): number {\r\n    return boardPiece === BoardPiece.EMPTY\r\n      ? 0\r\n      : boardPiece === this.boardPiece ? 1 : -1\r\n  }\r\n  private getStateValue(\r\n    state: Array<Array<number>>\r\n  ): { winnerBoardPiece: BoardPiece; chain: number } {\r\n    let winnerBoardPiece = BoardPiece.EMPTY\r\n    let chainValue = 0\r\n    for (let i = 0; i < Board.ROWS; i++) {\r\n      for (let j = 0; j < Board.COLUMNS; j++) {\r\n        let tempRight = 0,\r\n          tempBottom = 0,\r\n          tempBottomRight = 0,\r\n          tempTopRight = 0\r\n        for (let k = 0; k <= 3; k++) {\r\n          // from (i,j) to right\r\n          if (j + k < Board.COLUMNS) {\r\n            tempRight += this.getBoardPieceValue(state[i][j + k])\r\n          }\r\n\r\n          // from (i,j) to bottom\r\n          if (i + k < Board.ROWS) {\r\n            tempBottom += this.getBoardPieceValue(state[i + k][j])\r\n          }\r\n\r\n          // from (i,j) to bottom-right\r\n          if (i + k < Board.ROWS && j + k < Board.COLUMNS) {\r\n            tempBottomRight += this.getBoardPieceValue(state[i + k][j + k])\r\n          }\r\n\r\n          // from (i,j) to top-right\r\n          if (i - k >= 0 && j + k < 7) {\r\n            tempTopRight += this.getBoardPieceValue(state[i - k][j + k])\r\n          }\r\n        }\r\n        chainValue += tempRight * tempRight * tempRight\r\n        chainValue += tempBottom * tempBottom * tempBottom\r\n        chainValue += tempBottomRight * tempBottomRight * tempBottomRight\r\n        chainValue += tempTopRight * tempTopRight * tempTopRight\r\n\r\n        if (Math.abs(tempRight) === 4) {\r\n          winnerBoardPiece =\r\n            tempRight > 0 ? this.boardPiece : this.enemyBoardPiece\r\n        } else if (Math.abs(tempBottom) === 4) {\r\n          winnerBoardPiece =\r\n            tempBottom > 0 ? this.boardPiece : this.enemyBoardPiece\r\n        } else if (Math.abs(tempBottomRight) === 4) {\r\n          winnerBoardPiece =\r\n            tempBottomRight > 0 ? this.boardPiece : this.enemyBoardPiece\r\n        } else if (Math.abs(tempTopRight) === 4) {\r\n          winnerBoardPiece =\r\n            tempTopRight > 0 ? this.boardPiece : this.enemyBoardPiece\r\n        }\r\n      }\r\n    }\r\n    return {\r\n      winnerBoardPiece: winnerBoardPiece,\r\n      chain: chainValue\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return transformed value, so the AI could take a \"lower hanging fruit\",\r\n   *          i.e. a reward in closer future worth more than the same reward in distant future\r\n   * @param returnValue\r\n   * @param winnerBoardPiece\r\n   * @param depth\r\n   */\r\n  private transformValues(\r\n    returnValue: number,\r\n    winnerBoardPiece: BoardPiece,\r\n    depth: number\r\n  ): number {\r\n    const isWon = winnerBoardPiece === this.boardPiece\r\n    const isLost = winnerBoardPiece === this.enemyBoardPiece\r\n\r\n    // value is slightly higher than BIG_NEGATIVE_NUMBER & lower than BIG_POSITIVE_NUMBER\r\n    // so that minState(...) and maxState(...) could \"catch\"\" this value and AI take this move\r\n    // This is just my hypothesis, I haven't tested without it yet.\r\n    // My point is that this AI implementation is basically a heuristic function :P\r\n    if (isWon) {\r\n      returnValue = Utils.BIG_POSITIVE_NUMBER - 100\r\n    } else if (isLost) {\r\n      returnValue = Utils.BIG_NEGATIVE_NUMBER + 100\r\n    }\r\n    returnValue -= depth * depth\r\n    return returnValue\r\n  }\r\n  private getMove(\r\n    state: Array<Array<number>>,\r\n    depth: number,\r\n    alpha: number,\r\n    beta: number\r\n  ): {\r\n    value: number\r\n    move: number\r\n  } {\r\n    const stateValue = this.getStateValue(state)\r\n    const isWon = stateValue.winnerBoardPiece === this.boardPiece\r\n    const isLost = stateValue.winnerBoardPiece === this.enemyBoardPiece\r\n\r\n    if (depth >= PlayerAi.MAX_DEPTH || isWon || isLost) {\r\n      return {\r\n        value: this.transformValues(\r\n          stateValue.chain * this.ownBoardPieceValue,\r\n          stateValue.winnerBoardPiece,\r\n          depth\r\n        ),\r\n        move: -1 // leaf node\r\n      }\r\n    }\r\n\r\n    return depth % 2 === 0\r\n      ? this.minState(state, depth + 1, alpha, beta) // next is enemy's turn\r\n      : this.maxState(state, depth + 1, alpha, beta) // next is my turn\r\n  }\r\n\r\n  private maxState(\r\n    state: Array<Array<number>>,\r\n    depth: number,\r\n    alpha: number,\r\n    beta: number\r\n  ): {\r\n    value: number\r\n    move: number\r\n  } {\r\n    let value = Utils.BIG_NEGATIVE_NUMBER\r\n    let moveQueue: Array<number> = []\r\n    for (let column = 0; column < Board.COLUMNS; column++) {\r\n      const {\r\n        success: actionSuccessful,\r\n        map: nextState\r\n      } = Utils.getMockPlayerAction(state, this.boardPiece, column)\r\n      if (actionSuccessful) {\r\n        const { value: nextValue, move: nextMove } = this.getMove(\r\n          nextState,\r\n          depth,\r\n          alpha,\r\n          beta\r\n        )\r\n        if (nextValue > value) {\r\n          value = nextValue\r\n          moveQueue = [column]\r\n        } else if (nextValue === value) {\r\n          moveQueue.push(column)\r\n        }\r\n\r\n        // alpha-beta pruning\r\n        if (value > beta) {\r\n          return {\r\n            value: value,\r\n            move: Utils.choose(moveQueue)\r\n          }\r\n        }\r\n        alpha = Math.max(alpha, value)\r\n      }\r\n    }\r\n\r\n    return {\r\n      value: value,\r\n      move: Utils.choose(moveQueue)\r\n    }\r\n  }\r\n  private minState(\r\n    state: Array<Array<number>>,\r\n    depth: number,\r\n    alpha: number,\r\n    beta: number\r\n  ): {\r\n    value: number\r\n    move: number\r\n  } {\r\n    let value = Utils.BIG_POSITIVE_NUMBER\r\n    let moveQueue: Array<number> = []\r\n    for (let column = 0; column < Board.COLUMNS; column++) {\r\n      const {\r\n        success: actionSuccessful,\r\n        map: nextState\r\n      } = Utils.getMockPlayerAction(state, this.enemyBoardPiece, column)\r\n      if (actionSuccessful) {\r\n        const { value: nextValue, move: nextMove } = this.getMove(\r\n          nextState,\r\n          depth,\r\n          alpha,\r\n          beta\r\n        )\r\n        if (nextValue < value) {\r\n          value = nextValue\r\n          moveQueue = [column]\r\n        } else if (nextValue === value) {\r\n          moveQueue.push(column)\r\n        }\r\n\r\n        // alpha-beta pruning\r\n        if (value < alpha) {\r\n          return {\r\n            value: value,\r\n            move: Utils.choose(moveQueue)\r\n          }\r\n        }\r\n        beta = Math.min(beta, value)\r\n      }\r\n    }\r\n    return {\r\n      value: value,\r\n      move: Utils.choose(moveQueue)\r\n    }\r\n  }\r\n\r\n  async getAction(board: Board): Promise<number> {\r\n    const state = Utils.clone(board.map)\r\n    const action = this.maxState(\r\n      state,\r\n      0,\r\n      Utils.BIG_NEGATIVE_NUMBER,\r\n      Utils.BIG_POSITIVE_NUMBER\r\n    )\r\n    console.log(\r\n      `AI ${this\r\n        .boardPiece} choose column ${action.move} with value of ${action.value}`\r\n    )\r\n    return action.move\r\n  }\r\n}\r\n"]}