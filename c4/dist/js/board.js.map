{"version":3,"sources":["board.ts"],"names":[],"mappings":"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","file":"board.js","sourcesContent":["import { Player } from './player'\r\nimport { Utils } from './utils'\r\n\r\nexport enum BoardPiece {\r\n  EMPTY,\r\n  PLAYER_1,\r\n  PLAYER_2,\r\n  DRAW\r\n}\r\nexport class Board {\r\n  static readonly ROWS: number = 6\r\n  static readonly COLUMNS: number = 7\r\n  static readonly PLAYER_1_COLOR: string = '#ef453b'\r\n  static readonly PLAYER_2_COLOR: string = '#0059ff'\r\n  static readonly PIECE_STROKE_STYLE: string = 'black'\r\n  static readonly MASK_COLOR: string = '#d8d8d8'\r\n  static CANVAS_HEIGHT: number\r\n  static CANVAS_WIDTH: number\r\n  static PIECE_RADIUS: number\r\n  static MASK_X_BEGIN: number\r\n  static MASK_Y_BEGIN: number\r\n  static MESSAGE_WIDTH: number\r\n  static MESSAGE_X_BEGIN: number\r\n  static MESSAGE_Y_BEGIN: number\r\n  static SCALE: number\r\n\r\n  map: Array<Array<number>>\r\n  private winnerBoardPiece: BoardPiece\r\n\r\n  canvas: HTMLCanvasElement\r\n  context: CanvasRenderingContext2D\r\n\r\n  constructor(canvas: HTMLCanvasElement) {\r\n    this.canvas = canvas\r\n    this.context = <CanvasRenderingContext2D>canvas.getContext('2d')\r\n    this.getBoardScale()\r\n    this.initConstants()\r\n    this.reset()\r\n    this.onresize()\r\n  }\r\n\r\n  reset() {\r\n    this.map = []\r\n    for (let i = 0; i < Board.ROWS; i++) {\r\n      this.map.push([])\r\n      for (let j = 0; j < Board.COLUMNS; j++) {\r\n        this.map[i].push(BoardPiece.EMPTY)\r\n      }\r\n    }\r\n    this.winnerBoardPiece = BoardPiece.EMPTY\r\n    Utils.clearCanvas(this)\r\n  }\r\n\r\n  getBoardScale() {\r\n    return window.innerWidth < 640 ? (Board.SCALE = 0.5) : (Board.SCALE = 1.0)\r\n  }\r\n  initConstants() {\r\n    Board.CANVAS_HEIGHT = Board.SCALE * 480\r\n    Board.CANVAS_WIDTH = Board.SCALE * 640\r\n    Board.PIECE_RADIUS = Board.SCALE * 25\r\n    Board.MASK_X_BEGIN =\r\n      Math.max(\r\n        0,\r\n        Board.CANVAS_WIDTH - (3 * Board.COLUMNS + 1) * Board.PIECE_RADIUS\r\n      ) / 2\r\n    Board.MASK_Y_BEGIN =\r\n      Math.max(\r\n        0,\r\n        Board.CANVAS_HEIGHT - (3 * Board.ROWS + 1) * Board.PIECE_RADIUS\r\n      ) / 2\r\n    Board.MESSAGE_WIDTH = Board.SCALE * 400\r\n    Board.MESSAGE_X_BEGIN = (Board.CANVAS_WIDTH - Board.MESSAGE_WIDTH) / 2\r\n    Board.MESSAGE_Y_BEGIN = Board.SCALE * 20\r\n    this.canvas.width = Board.CANVAS_WIDTH\r\n    this.canvas.height = Board.CANVAS_HEIGHT\r\n  }\r\n\r\n  onresize() {\r\n    let prevBoardScale = Board.SCALE\r\n    Utils.onresize().add(() => {\r\n      this.getBoardScale()\r\n      if (prevBoardScale !== Board.SCALE) {\r\n        prevBoardScale = Board.SCALE\r\n        this.initConstants()\r\n        Utils.clearCanvas(this)\r\n        this.render()\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * TODO: this seems particularly similar with Utils.getMockPlayerAction yet different in some places, probably could refactor\r\n   * @returns is the action succesfully applied\r\n   * @param player current player\r\n   * @param column the colum in which the player want to drop a piece\r\n   */\r\n  async applyPlayerAction(player: Player, column: number): Promise<boolean> {\r\n    if (\r\n      this.map[0][column] !== BoardPiece.EMPTY ||\r\n      column < 0 ||\r\n      column >= Board.COLUMNS\r\n    ) {\r\n      return false\r\n    }\r\n\r\n    let isColumnEverFilled = false\r\n    let row = 0\r\n    for (let i = 0; i < Board.ROWS - 1; i++) {\r\n      if (this.map[i + 1][column] !== BoardPiece.EMPTY) {\r\n        isColumnEverFilled = true\r\n        row = i\r\n        break\r\n      }\r\n    }\r\n    if (!isColumnEverFilled) {\r\n      row = Board.ROWS - 1\r\n    }\r\n\r\n    await this.animateAction(row, column, player.boardPiece)\r\n\r\n    // reflect player's action to the map\r\n    this.map[row][column] = player.boardPiece\r\n    this.debug()\r\n\r\n    await Utils.animationFrame()\r\n    this.render()\r\n    return true\r\n  }\r\n\r\n  debug() {\r\n    console.log(this.map.map(row => row.join(' ')).join('\\n'))\r\n  }\r\n\r\n  getWinner(): BoardPiece {\r\n    if (this.winnerBoardPiece !== BoardPiece.EMPTY) {\r\n      return this.winnerBoardPiece\r\n    }\r\n    const direction = [\r\n      [0, -1],\r\n      [0, 1],\r\n      [-1, -1],\r\n      [-1, 0],\r\n      [-1, 1],\r\n      [1, -1],\r\n      [1, 0],\r\n      [1, 1]\r\n    ]\r\n    const isWinningSequence = (\r\n      i: number,\r\n      j: number,\r\n      playerPiece: BoardPiece,\r\n      dir: Array<number>,\r\n      count: number\r\n    ): boolean => {\r\n      if (count >= 4) {\r\n        return true\r\n      }\r\n      if (\r\n        i < 0 ||\r\n        j < 0 ||\r\n        i >= Board.ROWS ||\r\n        j >= Board.COLUMNS ||\r\n        this.map[i][j] !== playerPiece\r\n      ) {\r\n        return false\r\n      }\r\n      return isWinningSequence(\r\n        i + dir[0],\r\n        j + dir[1],\r\n        playerPiece,\r\n        dir,\r\n        count + 1\r\n      )\r\n    }\r\n    let countEmpty = 0\r\n    for (let i = 0; i < Board.ROWS; i++) {\r\n      for (let j = 0; j < Board.COLUMNS; j++) {\r\n        const playerPiece = this.map[i][j]\r\n        if (playerPiece !== BoardPiece.EMPTY) {\r\n          for (let k = 0; k < direction.length; k++) {\r\n            const isWon = isWinningSequence(\r\n              i + direction[k][0],\r\n              j + direction[k][1],\r\n              playerPiece,\r\n              direction[k],\r\n              1\r\n            )\r\n            if (isWon) {\r\n              return (this.winnerBoardPiece = playerPiece)\r\n            }\r\n          }\r\n        } else {\r\n          countEmpty++\r\n        }\r\n      }\r\n    }\r\n    if (countEmpty === 0) {\r\n      return (this.winnerBoardPiece = BoardPiece.DRAW)\r\n    }\r\n\r\n    return BoardPiece.EMPTY\r\n  }\r\n\r\n  announceWinner() {\r\n    if (this.winnerBoardPiece === BoardPiece.EMPTY) {\r\n      return\r\n    }\r\n    let message = '<h1>Thank you for playing.</h1>'\r\n    if (this.winnerBoardPiece === BoardPiece.DRAW) {\r\n      message += `It's a draw`\r\n    } else {\r\n      message += `Player ${this.winnerBoardPiece} wins`\r\n    }\r\n    message +=\r\n      '.<br />After dismissing this message, click the board to reset game.'\r\n    Utils.showMessage(message)\r\n  }\r\n\r\n  private getPlayerColor(boardPiece: BoardPiece): string {\r\n    switch (boardPiece) {\r\n      case BoardPiece.PLAYER_1:\r\n        return Board.PLAYER_1_COLOR\r\n      case BoardPiece.PLAYER_2:\r\n        return Board.PLAYER_2_COLOR\r\n      default:\r\n        return 'transparent'\r\n    }\r\n  }\r\n  private async animateAction(\r\n    newRow: number,\r\n    column: number,\r\n    boardPiece: BoardPiece\r\n  ): Promise<void> {\r\n    const fillStyle = this.getPlayerColor(boardPiece)\r\n    let currentY = 0\r\n    const doAnimation = async () => {\r\n      Utils.clearCanvas(this)\r\n      Utils.drawCircle(this.context, {\r\n        x:\r\n          3 * Board.PIECE_RADIUS * column +\r\n          Board.MASK_X_BEGIN +\r\n          2 * Board.PIECE_RADIUS,\r\n        y: currentY + Board.MASK_Y_BEGIN + 2 * Board.PIECE_RADIUS,\r\n        r: Board.PIECE_RADIUS,\r\n        fillStyle: fillStyle,\r\n        strokeStyle: Board.PIECE_STROKE_STYLE\r\n      })\r\n      this.render()\r\n      currentY += Board.PIECE_RADIUS\r\n    }\r\n    while (newRow * 3 * Board.PIECE_RADIUS >= currentY) {\r\n      await Utils.animationFrame()\r\n      doAnimation()\r\n    }\r\n  }\r\n\r\n  render() {\r\n    Utils.drawMask(this)\r\n    for (let y = 0; y < Board.ROWS; y++) {\r\n      for (let x = 0; x < Board.COLUMNS; x++) {\r\n        Utils.drawCircle(this.context, {\r\n          x:\r\n            3 * Board.PIECE_RADIUS * x +\r\n            Board.MASK_X_BEGIN +\r\n            2 * Board.PIECE_RADIUS,\r\n          y:\r\n            3 * Board.PIECE_RADIUS * y +\r\n            Board.MASK_Y_BEGIN +\r\n            2 * Board.PIECE_RADIUS,\r\n          r: Board.PIECE_RADIUS,\r\n          fillStyle: this.getPlayerColor(this.map[y][x]),\r\n          strokeStyle: Board.PIECE_STROKE_STYLE\r\n        })\r\n      }\r\n    }\r\n  }\r\n}\r\n"]}